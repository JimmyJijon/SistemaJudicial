@model SistemaGestionJudicial.Models.PoliceViewModel

@{
    ViewData["Title"] = "Gestión de Partes Policiales"; // Título para la página
}

@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor

@section Styles {
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
    <!-- Tom-select CSS -->
    <link href="https://cdn.jsdelivr.net/npm/tom-select@2.2.2/dist/css/tom-select.css" rel="stylesheet">
    <style>
        .page-background {
            background-image: url('/images/GreRomPolicia.jpg');
            background-size: cover; /* Asegura que la imagen cubra todo el contenedor */
            background-repeat: no-repeat; /* Evita que la imagen se repita */
            background-position: center center; /* Centra la imagen */
            /* Si quieres un efecto de fondo fijo con scroll, esto podría no ser lo que esperas en un div con overflow-auto */
        }
        /* Ajustes básicos para Tom-select con Tailwind si es necesario */
        .ts-control {
            border-color: #d1d5db; /* gray-300 */
            border-radius: 0.375rem; /* rounded-md */
            padding: 0.5rem 1rem; /* px-4 py-2 */
            width: 100%;
            min-height: auto; /* Evita que tome una altura fija por defecto si no hay input */
            display: flex;
            align-items: center; /* Alinea verticalmente el contenido */
        }

        .ts-wrapper.form-control.full.has-options.has-items {
            padding: 0; /* Remover padding del wrapper si es necesario */
            border: none; /* Remover borde del wrapper si es necesario */
        }

        .ts-control > input {
            padding: 0; /* Remover padding del input dentro de ts-control */
        }

        .ts-dropdown {
            border-color: #d1d5db;
            border-radius: 0.375rem;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06); /* shadow */
            z-index: 1000; /* Asegurar que esté por encima de otros elementos */
        }

            .ts-dropdown .option.active {
                background-color: #bfdbfe;
                color: #1e40af;
            }

            .ts-dropdown .option {
                padding: 0.5rem 1rem;
            }

        .ts-control.is-open .dropdown-active {
            border-bottom-left-radius: 0;
            border-bottom-right-radius: 0;
        }
        /* Altura del dropdown para el scroll (maxOptions hará el resto) */
        .ts-dropdown-content {
            max-height: 130px; /* Puedes ajustar esta altura según tu preferencia */
            overflow-y: auto;
        }
    </style>
}
<div class="flex-1 overflow-auto page-background">
    <header class="bg-white shadow-sm py-4 px-6 flex justify-between items-center no-print">
        <h2 class="text-xl font-semibold text-gray-800">Gestión de Partes Policiales</h2>
        <div class="relative flex items-center space-x-4">

            <div class="flex items-center space-x-2 cursor-pointer" id="userMenuButton" tabindex="0" aria-haspopup="true" aria-expanded="false">
                <div class="h-8 w-8 rounded-full bg-blue-500 flex items-center justify-center text-white">
                    <i class="fas fa-user"></i>
                </div>
                <span class="text-sm font-medium">
                    @(HttpContextAccessor.HttpContext.Session.GetString("PrimerNombre") ?? "Usuario")
                </span>
                <i class="fas fa-chevron-down ml-1 text-gray-600"></i>
            </div>

            <!-- Menú desplegable -->
            <div id="userMenu" class="hidden absolute right-0 mt-10 w-40 bg-white rounded-md shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none z-50">
                <a href="@Url.Action("Logout", "Account")"
                   class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                    Cerrar sesión
                </a>
            </div>
        </div>
    </header>

    
    

    <div class="p-6">
        <div class="flex justify-between items-center mb-6">
            
            <button onclick="openModal('createParteModal')"
                    class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg flex items-center">
                <i class="fas fa-plus mr-2"></i> Agregar Parte
            </button>
        </div>

        <div class="bg-white rounded-lg p-6">
            <div class="overflow-x-auto">
                <table class="w-full border border-gray-300">
                    <thead class="bg-gray-100">
                        <tr>
                            <th class="border px-4 py-2">ID</th>
                            <th class="border px-4 py-2">Fecha</th>
                            <th class="border px-4 py-2">Policía</th>
                            <th class="border px-4 py-2">Descripción</th>
                            <th class="border px-4 py-2">Delito</th>
                            <th class="border px-4 py-2">Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var parte in Model.Partes)
                        {
                            <tr>
                                <td class="border px-4 py-2">@parte.IdParte</td>
                                <td class="border px-4 py-2">@parte.FechaParte?.ToString("dd/MM/yyyy")</td>
                                <td class="border px-4 py-2">
                                    @(parte.IdPersonaPoliciaNavigation != null
                                        ? $"{parte.IdPersonaPoliciaNavigation.Nombres} {parte.IdPersonaPoliciaNavigation.Apellidos}"
                                        : "Desconocido")
                                </td>
                                <td class="border px-4 py-2">@parte.Descripcion</td>
                                <td class="border px-4 py-2">
                                    @(parte.IdDenunciaNavigation?.IdDelitoNavigation?.Nombre ?? "N/A")
                                </td>
                                <td class="border px-4 py-2">
                                    <button class="text-blue-600 hover:text-blue-800 mr-2 btn-show-detail"
                                            data-id="@parte.IdParte"
                                            data-fecha="@parte.FechaParte?.ToString("dd/MM/yyyy")"
                                            data-policia="@(parte.IdPersonaPoliciaNavigation != null ? parte.IdPersonaPoliciaNavigation.Nombres + " " + parte.IdPersonaPoliciaNavigation.Apellidos : "Desconocido")"
                                            data-descripcion="@parte.Descripcion"
                                            data-denuncia="@(parte.IdDenunciaNavigation != null ? parte.IdDenunciaNavigation.Descripcion : "")"
                                            data-denuncia-delito="@(parte.IdDenunciaNavigation?.IdDelitoNavigation?.Nombre ?? "N/A")"
                                            title="Ver detalle">
                                        <i class="fas fa-eye"></i>
                                    </button>

                                    <button class="text-green-600 hover:text-green-800 mr-2"
                                            onclick='openEditParteModal(@parte.IdParte, "@parte.FechaParte?.ToString("yyyy-MM-dd")", @Html.Raw(Json.Serialize(parte.Descripcion)), @parte.IdPersonaPolicia, @parte.IdDenuncia)'
                                            title="Editar">
                                        <i class="fas fa-edit"></i>
                                    </button>

                                    <button class="text-red-600 hover:text-red-800"
                                            onclick="openDeleteParteModal(@parte.IdParte)"
                                            title="Eliminar">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>


<!-- Modal Crear Parte Policial -->
<div id="createParteModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50 overflow-auto">
    <div class="bg-white rounded-lg p-6 w-full max-w-lg max-h-[90vh] overflow-y-auto">
        <h2 class="text-2xl font-bold mb-6">Crear Parte Policial</h2>
        <form id="createParteForm" asp-controller="Police" asp-action="Create" method="post">
            @Html.AntiForgeryToken()
            <div class="mb-4">
                <label for="createFecha_Parte" class="block text-gray-700 font-semibold mb-2">Fecha</label>
                <input id="createFecha_Parte" name="Fecha_Parte" type="date" class="w-full px-4 py-2 border rounded-md" required />
                <span class="text-red-500 text-sm" id="createFechaError"></span>
            </div>

            <div class="mb-4">
                <label for="createDescripcion" class="block text-gray-700 font-semibold mb-2">Descripción</label>
                <textarea id="createDescripcion" name="Descripcion" class="w-full px-4 py-2 border rounded-md" rows="4" required></textarea>
                <span class="text-red-500 text-sm" id="createDescripcionError"></span>
            </div>

            <div class="mb-4">
                <label for="createId_Persona_Policia" class="block font-semibold mb-2">Policía</label>
                <select id="createId_Persona_Policia" name="Id_Persona_Policia" required>
                    @* REMOVIDAS CLASES TAILWIND AQUÍ *@
                    <option value="">Seleccione un policía</option>
                    @{
                        var personas = ViewBag.Personas as IEnumerable<SelectListItem>;
                        if (personas != null)
                        {
                            foreach (var persona in personas)
                            {
                                <option value="@persona.Value">@persona.Text</option>
                            }
                        }
                    }
                </select>
                <span class="text-red-500 text-sm" id="createPersonaError"></span>
            </div>

            <div class="mb-4">
                <label for="createId_Denuncia" class="block font-semibold mb-2">Denuncia</label>
                <select id="createId_Denuncia" name="Id_Denuncia" required>
                    @* REMOVIDAS CLASES TAILWIND AQUÍ *@
                    <option value="">Seleccione una denuncia</option>
                    @{
                        var denuncias = ViewBag.Denuncias as IEnumerable<SelectListItem>;
                        if (denuncias != null)
                        {
                            foreach (var denuncia in denuncias)
                            {
                                <option value="@denuncia.Value">@denuncia.Text</option>
                            }
                        }
                    }
                </select>
                <span class="text-red-500 text-sm" id="createDenunciaError"></span>
            </div>

            <div class="flex justify-end">
                <button type="button" class="bg-gray-500 text-white px-4 py-2 rounded-lg mr-2" onclick="closeModal('createParteModal')">Cancelar</button>
                <button type="submit" class="bg-blue-600 text-white px-4 py-2 rounded-lg">Guardar</button>
            </div>
        </form>
    </div>
</div>

<!-- Modal Mostrar Detalles -->
<div id="detailModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50">
    <div class="bg-white rounded-lg p-6 max-w-md w-full">
        <h3 class="text-xl font-bold mb-4">Detalle del Parte Policial</h3>
        <p><strong>ID:</strong> <span id="modalId"></span></p>
        <p><strong>Fecha:</strong> <span id="modalFecha"></span></p>
        <p><strong>Policía:</strong> <span id="modalPolicia"></span></p>
        <p><strong>Descripción:</strong> <span id="modalDescripcion"></span></p>
        <p><strong>Delito:</strong> <span id="modalDenunciaDelito"></span></p>
        <div class="mt-6 text-right">
            <button id="closeDetailModalBtn" class="bg-gray-500 text-white px-4 py-2 rounded">Cerrar</button>
        </div>
    </div>
</div>

<!-- Modal Editar Parte Policial -->
<div id="editParteModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50 overflow-auto">
    <div class="bg-white rounded-lg p-6 w-full max-w-lg max-h-[90vh] overflow-y-auto">
        <h2 class="text-2xl font-bold mb-6">Editar Parte Policial</h2>
        <form id="editParteForm" asp-controller="Police" asp-action="Edit" method="post">
            @Html.AntiForgeryToken()
            <input type="hidden" id="editId_Parte" name="Id_Parte" />

            <div class="mb-4">
                <label for="editFecha_Parte" class="block text-gray-700 font-semibold mb-2">Fecha</label>
                <input id="editFecha_Parte" name="Fecha_Parte" type="date" class="w-full px-4 py-2 border rounded-md" required />
                <span class="text-red-500 text-sm" id="editFechaError"></span>
            </div>

            <div class="mb-4">
                <label for="editDescripcion" class="block text-gray-700 font-semibold mb-2">Descripción</label>
                <textarea id="editDescripcion" name="Descripcion" class="w-full px-4 py-2 border rounded-md" rows="4" required></textarea>
                <span class="text-red-500 text-sm" id="editDescripcionError"></span>
            </div>

            <div class="mb-4">
                <label for="editId_Persona_Policia" class="block font-semibold mb-2">Policía</label>
                <select id="editId_Persona_Policia" name="Id_Persona_Policia" required>
                    @* REMOVIDAS CLASES TAILWIND AQUÍ *@
                    <option value="">Seleccione un policía</option>
                    @{
                        var personasEdit = ViewBag.Personas as IEnumerable<SelectListItem>;
                        if (personasEdit != null)
                        {
                            foreach (var persona in personasEdit)
                            {
                                <option value="@persona.Value">@persona.Text</option>
                            }
                        }
                    }
                </select>
                <span class="text-red-500 text-sm" id="editPersonaError"></span>
            </div>

            <div class="mb-4">
                <label for="editId_Denuncia" class="block font-semibold mb-2">Denuncia</label>
                <select id="editId_Denuncia" name="Id_Denuncia" required>
                    @* REMOVIDAS CLASES TAILWIND AQUÍ *@
                    <option value="">Seleccione una denuncia</option>
                    @{
                        var denunciasEdit = ViewBag.Denuncias as IEnumerable<SelectListItem>;
                        if (denunciasEdit != null)
                        {
                            foreach (var denuncia in denunciasEdit)
                            {
                                <option value="@denuncia.Value">@denuncia.Text</option>
                            }
                        }
                    }
                </select>
                <span class="text-red-500 text-sm" id="editDenunciaError"></span>
            </div>

            <div class="flex justify-end">
                <button type="button" class="bg-gray-500 text-white px-4 py-2 rounded-lg mr-2" onclick="closeModal('editParteModal')">Cancelar</button>
                <button type="submit" class="bg-green-600 text-white px-4 py-2 rounded-lg">Guardar Cambios</button>
            </div>
        </form>
    </div>
</div>

<!-- Modal Confirmar Eliminación -->
<div id="deleteParteModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50">
    <div class="bg-white rounded-lg p-6 w-full max-w-md">
        <h3 class="text-xl font-bold mb-4">¿Eliminar Parte Policial?</h3>
        <p class="mb-6">Esta acción no se puede deshacer. ¿Deseas continuar?</p>
        <form asp-controller="Police" asp-action="Delete" method="post">
            @Html.AntiForgeryToken()
            <input type="hidden" id="deleteId_Parte" name="id" />
            <div class="flex justify-end">
                <button type="button" class="bg-gray-500 text-white px-4 py-2 rounded-lg mr-2" onclick="closeModal('deleteParteModal')">Cancelar</button>
                <button type="submit" class="bg-red-600 text-white px-4 py-2 rounded-lg">Eliminar</button>
            </div>
        </form>
    </div>
</div>

<!-- Tom-select JS -->
<script src="https://cdn.jsdelivr.net/npm/tom-select@2.2.2/dist/js/tom-select.complete.min.js"></script>

<script>
    // Variables para almacenar las instancias de Tom-select
    let createPoliceSelect, createDenunciaSelect, editPoliceSelect, editDenunciaSelect;

    document.addEventListener('DOMContentLoaded', function() {
        // Inicializar Tom-select para el modal de creación (con verificación de existencia)
        const createPoliceEl = document.getElementById("createId_Persona_Policia");
        if (createPoliceEl) {
            createPoliceSelect = new TomSelect(createPoliceEl, {
                maxOptions: 8,
                create: false,
                sortField: {
                    field: "text",
                    direction: "asc"
                },
                // Asegura que el Tom-select sea un select de una sola opción
                plugins: ['dropdown_input'],
                dropdownParent: 'body' // Puedes añadir este plugin si quieres un input de búsqueda dentro del dropdown
            });
        }

        const createDenunciaEl = document.getElementById("createId_Denuncia");
        if (createDenunciaEl) {
            createDenunciaSelect = new TomSelect(createDenunciaEl, {
                maxOptions: 8,
                create: false,
                sortField: {
                    field: "text",
                    direction: "asc"
                },
                plugins: ['dropdown_input'],
                dropdownParent: 'body'
            });
        }

        // Inicializar Tom-select para el modal de edición (con verificación de existencia)
        const editPoliceEl = document.getElementById("editId_Persona_Policia");
        if (editPoliceEl) {
            editPoliceSelect = new TomSelect(editPoliceEl, {
                maxOptions: 8,
                create: false,
                sortField: {
                    field: "text",
                    direction: "asc"
                },
                plugins: ['dropdown_input'],
                dropdownParent: 'body'
            });
        }

        const editDenunciaEl = document.getElementById("editId_Denuncia");
        if (editDenunciaEl) {
            editDenunciaSelect = new TomSelect(editDenunciaEl, {
                maxOptions: 8,
                create: false,
                sortField: {
                    field: "text",
                    direction: "asc"
                },
                plugins: ['dropdown_input'],
                dropdownParent: 'body'

            });
        }
    });


    // Función genérica para abrir un modal
    function openModal(id) {
        document.getElementById(id).classList.remove('hidden');
        // Limpiar errores y formulario al abrir modal de creación
        if (id === 'createParteModal') {
            clearForm('create'); // Limpiar campos

            // Resetear valores de Tom-select para el modal de creación
            if (createPoliceSelect) createPoliceSelect.setValue('', true); // true para "silent" (no dispara eventos change)
            if (createDenunciaSelect) createDenunciaSelect.setValue('', true);
            clearFormErrors('create'); // Limpiar mensajes de error

            const today = new Date().toISOString().split('T')[0];
            document.getElementById('createFecha_Parte').setAttribute('max', today);
        }
    }

    // Función genérica para cerrar un modal
    function closeModal(id) {
        document.getElementById(id).classList.add('hidden');
        // Limpiar errores al cerrar cualquier modal de formulario
        if (id === 'createParteModal' || id === 'editParteModal') {
            clearFormErrors(id.replace('ParteModal', '').replace('create', 'create').replace('edit', 'edit'));
        }
    }

    // Función para limpiar campos de un formulario dado un prefijo (ej. 'create')
    function clearForm(prefix) {
        document.getElementById(`${prefix}Fecha_Parte`).value = '';
        document.getElementById(`${prefix}Descripcion`).value = '';
    }

    // Función para limpiar mensajes de error de un formulario dado un prefijo (ej. 'create', 'edit')
    function clearFormErrors(prefix) {
        document.getElementById(`${prefix}FechaError`).textContent = '';
        document.getElementById(`${prefix}DescripcionError`).textContent = '';
        document.getElementById(`${prefix}PersonaError`).textContent = '';
        document.getElementById(`${prefix}DenunciaError`).textContent = '';
    }

    // Manejar la apertura y cierre del modal de detalles
    document.querySelectorAll('.btn-show-detail').forEach(btn => {
        btn.addEventListener('click', function () {
            // Llenar los campos del modal de detalles con los datos del botón
            document.getElementById('modalId').textContent = this.dataset.id;
            document.getElementById('modalFecha').textContent = this.dataset.fecha;
            document.getElementById('modalPolicia').textContent = this.dataset.policia;
            document.getElementById('modalDescripcion').textContent = this.dataset.descripcion;
            document.getElementById('modalDenunciaDelito').textContent = this.dataset.denunciaDelito;
            openModal('detailModal'); // Abrir el modal de detalles
        });
    });

    document.getElementById('closeDetailModalBtn').addEventListener('click', () => {
        closeModal('detailModal'); // Cerrar el modal de detalles
    });

    // Abrir modal editar con datos cargados
    function openEditParteModal(id, fecha, descripcion, idPolicia, idDenuncia) {
        // Cargar los valores en los campos del formulario de edición
        document.getElementById('editId_Parte').value = id;
        document.getElementById('editFecha_Parte').value = fecha;
        document.getElementById('editDescripcion').value = descripcion;

        const today = new Date().toISOString().split('T')[0];
        document.getElementById('editFecha_Parte').setAttribute('max', today);

        // Establecer los valores en las instancias de Tom-select
        if (editPoliceSelect) { // Verificar si la instancia existe
            editPoliceSelect.setValue(idPolicia, true);
        } else {
            document.getElementById('editId_Persona_Policia').value = idPolicia;
        }

        if (editDenunciaSelect) { // Verificar si la instancia existe
            editDenunciaSelect.setValue(idDenuncia, true);
        } else {
            document.getElementById('editId_Denuncia').value = idDenuncia;
        }

        clearFormErrors('edit'); // Limpiar errores previos antes de abrir
        openModal('editParteModal'); // Abrir el modal de edición
    }

    // Abrir modal eliminar
    function openDeleteParteModal(id) {
        document.getElementById('deleteId_Parte').value = id; // Establecer el ID en el campo oculto
        openModal('deleteParteModal'); // Abrir el modal de confirmación de eliminación
    }

    // Función genérica para validar formularios de parte policial
    function validateParteForm(prefix) {
        let isValid = true;
        clearFormErrors(prefix); // Limpiar errores al inicio de la validación

        const fechaInput = document.getElementById(`${prefix}Fecha_Parte`);
        const descripcionInput = document.getElementById(`${prefix}Descripcion`);

        let policiaValue, denunciaValue;

        // Obtener los valores de Tom-select si las instancias existen
        if (prefix === 'create' && createPoliceSelect) {
            policiaValue = createPoliceSelect.getValue();
            denunciaValue = createDenunciaSelect.getValue();
        } else if (prefix === 'edit' && editPoliceSelect) {
            policiaValue = editPoliceSelect.getValue();
            denunciaValue = editDenunciaSelect.getValue();
        } else {
            // Fallback a select nativo si Tom-select no está disponible
            policiaValue = document.getElementById(`${prefix}Id_Persona_Policia`).value;
            denunciaValue = document.getElementById(`${prefix}Id_Denuncia`).value;
        }


        if (!fechaInput.value) {
            document.getElementById(`${prefix}FechaError`).textContent = 'La fecha es requerida.';
            isValid = false;
        }

        if (!descripcionInput.value.trim()) {
            document.getElementById(`${prefix}DescripcionError`).textContent = 'La descripción es requerida.';
            isValid = false;
        }

        // 1. Validación de Fecha: No futura, debe ser hoy o antes
        if (!fechaInput.value) {
            fechaErrorSpan.textContent = 'La fecha es requerida.';
            isValid = false;
        } else {
            const selectedDate = new Date(fechaInput.value);
            const today = new Date();
            // Normalizar las fechas a solo el día para comparar sin la hora
            today.setHours(0, 0, 0, 0);
            selectedDate.setHours(0, 0, 0, 0);

            if (selectedDate > today) {
                fechaErrorSpan.textContent = 'La fecha no puede ser futura.';
                isValid = false;
            }
        }

        // 2. Validación de Descripción: No vacía y longitud mínima/máxima
        const descripcion = descripcionInput.value.trim();
        const minLength = 10; // Ejemplo: Mínimo 10 caracteres
        const maxLength = 450; // Ejemplo: Máximo 500 caracteres

        if (!descripcion) {
            descripcionErrorSpan.textContent = 'La descripción es requerida.';
            isValid = false;
        } else if (descripcion.length < minLength) {
            descripcionErrorSpan.textContent = `La descripción debe tener al menos ${minLength} caracteres.`;
            isValid = false;
        } else if (descripcion.length > maxLength) {
            descripcionErrorSpan.textContent = `La descripción no puede exceder los ${maxLength} caracteres.`;
            isValid = false;
        }

        if (!policiaValue) {
            document.getElementById(`${prefix}PersonaError`).textContent = 'Debe seleccionar un policía.';
            isValid = false;
        }

        if (!denunciaValue) {
            document.getElementById(`${prefix}DenunciaError`).textContent = 'Debe seleccionar una denuncia.';
            isValid = false;
        }

        return isValid;
    }

    // Asignar el evento submit para la validación de formularios de creación y edición
    document.getElementById('createParteForm').addEventListener('submit', function(e) {
        if (!validateParteForm('create')) {
            e.preventDefault(); // Detener el envío del formulario si la validación falla
        }
    });

    document.getElementById('editParteForm').addEventListener('submit', function(e) {
        if (!validateParteForm('edit')) {
            e.preventDefault(); // Detener el envío del formulario si la validación falla
        }
    });

</script>
<script>
    // Toggle menú usuario
    const userMenuButton = document.getElementById('userMenuButton');
    const userMenu = document.getElementById('userMenu');

    userMenuButton.addEventListener('click', () => {
        userMenu.classList.toggle('hidden');
        // Actualizar aria-expanded para accesibilidad
        const expanded = userMenuButton.getAttribute('aria-expanded') === 'true';
        userMenuButton.setAttribute('aria-expanded', !expanded);
    });

    // Cerrar el menú si se hace clic fuera
    document.addEventListener('click', (event) => {
        if (!userMenuButton.contains(event.target) && !userMenu.contains(event.target)) {
            userMenu.classList.add('hidden');
            userMenuButton.setAttribute('aria-expanded', 'false');
        }
    });
</script>